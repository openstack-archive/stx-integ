From 281254cd5ee9a7df25e4d5d3147cabdd0e9155b3 Mon Sep 17 00:00:00 2001
From: Changcheng Liu <changcheng.liu@intel.com>
Date: Sat, 26 Jan 2019 18:41:05 +0800
Subject: [PATCH 38/38] default raise exception for unused API

Signed-off-by: Changcheng Liu <changcheng.liu@intel.com>
---
 cephclient/wrapper.py | 198 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 198 insertions(+)

diff --git a/cephclient/wrapper.py b/cephclient/wrapper.py
index b033907..151ce9e 100644
--- a/cephclient/wrapper.py
+++ b/cephclient/wrapper.py
@@ -48,6 +48,8 @@ class CephWrapper(client.CephClient):
         return self.post('request?wait=1', json = {'prefix': 'quorum_status'}, **kwargs)
 
     def report(self, tags=None, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         if tags is not None:
             return self.get('report?tags={0}'
                             .format(tags), **kwargs)
@@ -61,28 +63,42 @@ class CephWrapper(client.CephClient):
     # root PUT calls
     ###
     def compact(self, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('compact', **kwargs)
 
     def heap(self, heapcmd, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('heap?heapcmd={0}'
                         .format(heapcmd), **kwargs)
 
     def injectargs(self, injected_args, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('injectargs?injected_args={0}'
                         .format(injected_args), **kwargs)
 
     def log(self, logtext, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('log?logtext={0}'
                         .format(logtext), **kwargs)
 
     def quorum(self, quorumcmd, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('quorum?quorumcmd={0}'
                         .format(quorumcmd), **kwargs)
 
     def scrub(self, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('scrub', **kwargs)
 
     def tell(self, target, args, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('tell?target={0}&args={1}'
                         .format(target, args), **kwargs)
 
@@ -90,6 +106,8 @@ class CephWrapper(client.CephClient):
     # auth GET calls
     ###
     def auth_export(self, entity=None, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         if entity is not None:
             return self.get('auth/export?entity={0}'
                             .format(entity), **kwargs)
@@ -97,17 +115,25 @@ class CephWrapper(client.CephClient):
             return self.get('auth/export', **kwargs)
 
     def auth_get(self, entity, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('auth/get?entity={0}'
                         .format(entity), **kwargs)
 
     def auth_get_key(self, entity, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('auth/get-key?entity={0}'
                         .format(entity), **kwargs)
 
     def auth_list(self, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('auth/list', **kwargs)
 
     def auth_print_key(self, entity, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('auth/print-key?entity={0}'
                         .format(entity), **kwargs)
 
@@ -123,6 +149,8 @@ class CephWrapper(client.CephClient):
     }
     """
     def auth_add(self, entity, caps={}, file=None, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         # XXX-TODO: Implement file input
         full_caps = list()
         if caps:
@@ -135,6 +163,8 @@ class CephWrapper(client.CephClient):
                         .format(entity, ''.join(full_caps)), **kwargs)
 
     def auth_caps(self, entity, caps={}, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         full_caps = list()
         if caps:
             for key in caps:
@@ -159,6 +189,8 @@ class CephWrapper(client.CephClient):
             return self.post('request?wait=1', json = {'prefix': 'auth get-or-create', 'entity': entity}, **kwargs)
 
     def auth_get_or_create_key(self, entity, caps={}, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         # XXX-TODO: Implement file input
         full_caps = list()
         if caps:
@@ -177,23 +209,33 @@ class CephWrapper(client.CephClient):
     # config-key GET calls
     ###
     def config_key_exists(self, key, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('config-key/exists?key={0}'
                         .format(key), **kwargs)
 
     def config_key_get(self, key, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('config-key/get?key={0}'
                         .format(key), **kwargs)
 
     def config_key_list(self, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('config-key/list', **kwargs)
 
     ###
     # mds GET calls
     ###
     def mds_compat_show(self, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('mds/compat/show', **kwargs)
 
     def mds_dump(self, epoch=None, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         if epoch is not None:
             return self.get('mds/dump?epoch={0}'
                             .format(epoch), **kwargs)
@@ -201,6 +243,8 @@ class CephWrapper(client.CephClient):
             return self.get('mds/dump', **kwargs)
 
     def mds_getmap(self, epoch=None, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         kwargs['supported_body_types'] = ['binary']
 
         if epoch is not None:
@@ -210,50 +254,74 @@ class CephWrapper(client.CephClient):
             return self.get('mds/getmap', **kwargs)
 
     def mds_stat(self, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('mds/stat', **kwargs)
 
     ###
     # mds PUT calls
     ###
     def mds_add_data_pool(self, pool, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('mds/add_data_pool?pool={0}'
                         .format(pool), **kwargs)
 
     def mds_cluster_down(self, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('mds/cluster_down', **kwargs)
 
     def mds_cluster_up(self, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('mds/cluster_up', **kwargs)
 
     def mds_compat_rm_compat(self, feature, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('mds/compat/rm_compat?feature={0}'
                         .format(feature), **kwargs)
 
     def mds_compat_rm_incompat(self, feature, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('mds/compat/rm_incompat?feature={0}'
                         .format(feature), **kwargs)
 
     def mds_deactivate(self, who, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('mds/deactivate?who={0}'
                         .format(who), **kwargs)
 
     def mds_fail(self, who, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('mds/fail?who={0}'
                         .format(who), **kwargs)
 
     def mds_newfs(self, metadata, data, sure, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('mds/newfs?metadata={0}&data={1}&sure={2}'
                         .format(metadata, data, sure), **kwargs)
 
     def mds_remove_data_pool(self, pool, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('mds/remove_data_pool?pool={0}'
                         .format(pool), **kwargs)
 
     def mds_rm(self, gid, who, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('mds/rm?gid={0}&who={1}'
                         .format(gid, who), **kwargs)
 
     def mds_rmfailed(self, who, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('mds/rmfailed?who={0}'
                         .format(who), **kwargs)
 
@@ -264,18 +332,26 @@ class CephWrapper(client.CephClient):
         raise exceptions.FunctionNotImplemented()
 
     def mds_set_max_mds(self, maxmds, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('mds/set_max_mds?maxmds={0}'
                         .format(maxmds), **kwargs)
 
     def mds_setmap(self, epoch, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('mds/setmap?epoch={0}'
                         .format(epoch), **kwargs)
 
     def mds_stop(self, who, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('mds/stop?who={0}'
                         .format(who), **kwargs)
 
     def mds_tell(self, who, args, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('mds/tell?who={0}&args={1}'
                         .format(who, args), **kwargs)
 
@@ -295,6 +371,8 @@ class CephWrapper(client.CephClient):
             return self.post('request?wait=1', json = {'prefix': 'mon dump'}, **kwargs)
 
     def mon_getmap(self, epoch=None, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         kwargs['supported_body_types'] = ['binary']
 
         if epoch is not None:
@@ -304,21 +382,29 @@ class CephWrapper(client.CephClient):
             return self.get('mon/getmap', **kwargs)
 
     def mon_stat(self, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         kwargs['supported_body_types'] = ['text', 'xml']
 
         return self.get('mon/stat', **kwargs)
 
     def mon_status(self, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('mon_status', **kwargs)
 
     ###
     # mon PUT calls
     ###
     def mon_add(self, name, addr, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('mon/add?name={0}&addr={1}'
                         .format(name, addr), **kwargs)
 
     def mon_remove(self, name, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('mon/remove?name={0}'
                         .format(name), **kwargs)
 
@@ -326,9 +412,13 @@ class CephWrapper(client.CephClient):
     # osd GET calls
     ###
     def osd_blacklist_ls(self, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('osd/blacklist/ls', **kwargs)
 
     def osd_crush_dump(self, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('osd/crush/dump', **kwargs)
 
     def osd_crush_rule_dump(self, name=None, **kwargs):
@@ -338,6 +428,8 @@ class CephWrapper(client.CephClient):
             return self.post('request?wait=1', json = {'prefix': 'osd crush rule dump'}, **kwargs)
 
     def osd_crush_rule_list(self, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('osd/crush/rule/list', **kwargs)
 
     def osd_crush_rule_ls(self, **kwargs):
@@ -425,6 +517,8 @@ class CephWrapper(client.CephClient):
             return self.post('request?wait=1', json = {'prefix': 'osd df'}, **kwargs)
 
     def osd_dump(self, epoch=None, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         if epoch is not None:
             return self.get('osd/dump?epoch={0}'
                             .format(epoch), **kwargs)
@@ -432,10 +526,14 @@ class CephWrapper(client.CephClient):
             return self.get('osd/dump', **kwargs)
 
     def osd_find(self, id, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('osd/find?id={0}'
                         .format(id), **kwargs)
 
     def osd_getcrushmap(self, epoch=None, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         kwargs['supported_body_types'] = ['binary']
 
         if epoch is not None:
@@ -445,6 +543,8 @@ class CephWrapper(client.CephClient):
             return self.get('osd/getcrushmap', **kwargs)
 
     def osd_getmap(self, epoch=None, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         kwargs['supported_body_types'] = ['binary']
 
         if epoch is not None:
@@ -454,9 +554,13 @@ class CephWrapper(client.CephClient):
             return self.get('osd/getmap', **kwargs)
 
     def osd_getmaxosd(self, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('osd/getmaxosd', **kwargs)
 
     def osd_ls(self, epoch=None, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         if epoch is not None:
             return self.get('osd/ls?epoch={0}'
                             .format(epoch), **kwargs)
@@ -464,6 +568,8 @@ class CephWrapper(client.CephClient):
             return self.get('osd/ls', **kwargs)
 
     def osd_lspools(self, auid=None, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         if auid is not None:
             return self.get('osd/lspools?auid={0}'
                             .format(auid), **kwargs)
@@ -471,10 +577,14 @@ class CephWrapper(client.CephClient):
             return self.get('osd/lspools', **kwargs)
 
     def osd_map(self, pool, object, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('osd/map?pool={0}&object={1}'
                         .format(pool, object), **kwargs)
 
     def osd_perf(self, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('osd/perf', **kwargs)
 
     def osd_get_pool_param(self, pool, var, **kwargs):
@@ -484,6 +594,8 @@ class CephWrapper(client.CephClient):
         return self.post('request?wait=1', json = {'prefix': 'osd pool get', 'pool': pool, 'var': var}, **kwargs)
 
     def osd_pool_stats(self, name=None, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         if name is not None:
             return self.get('osd/pool/stats?name={0}'
                             .format(name), **kwargs)
@@ -515,6 +627,8 @@ class CephWrapper(client.CephClient):
     # osd PUT calls
     ###
     def osd_blacklist(self, blacklistop, addr, expire, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/blacklist?blacklistop={0}&addr={1}&expire={2}'
                         .format(blacklistop, addr, expire), **kwargs)
 
@@ -528,6 +642,8 @@ class CephWrapper(client.CephClient):
         return self.post('request?wait=1', json = jsont, **kwargs)
 
     def osd_crush_add(self, id, weight, args, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/crush/add?id={0}&weight={1}&args={2}'
                         .format(id, weight, args), **kwargs)
 
@@ -535,10 +651,14 @@ class CephWrapper(client.CephClient):
         return self.post('request?wait=1', json = {'prefix': 'osd crush add-bucket', 'name': name, 'type': type}, **kwargs)
 
     def osd_crush_create_or_move(self, id, weight, args, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/crush/create-or-move?id={0}&weight={1}&args={2}'
                         .format(id, weight, args), **kwargs)
 
     def osd_crush_link(self, name, args, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/crush/link?name={0}&args={2}'
                         .format(name, args), **kwargs)
 
@@ -555,14 +675,20 @@ class CephWrapper(client.CephClient):
             return self.post('request?wait=1', json = {'prefix': 'osd crush remove', 'name': name}, **kwargs)
 
     def osd_crush_reweight(self, name, weight, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/crush/reweight?name={0}&weight={1}'
                         .format(name, weight), **kwargs)
 
     def osd_crush_rm(self, name, ancestor, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/crush/rm?name={0}&ancestor={1}'
                         .format(name, ancestor), **kwargs)
 
     def osd_crush_rule_create_simple(self, name, root, type, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put(
             'osd/crush/rule/create-simple?name={0}&root={1}&type={2}'
             .format(name, root, type), **kwargs)
@@ -571,18 +697,26 @@ class CephWrapper(client.CephClient):
         return self.post('request?wait=1', json = {'prefix': 'osd crush rule rm', 'name': name}, **kwargs)
 
     def osd_crush_set(self, id, name, weight, args, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/crush/set?id={0}&weight={1}&args={2}'
                         .format(id, name, weight, args), **kwargs)
 
     def osd_crush_tunables(self, profile, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/crush/tunables?profile={0}'
                         .format(profile), **kwargs)
 
     def osd_crush_unlink(self, name, ancestor, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/crush/unlink?name={0}&ancestor={1}'
                         .format(name, ancestor), **kwargs)
 
     def osd_deep_scrub(self, who, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/deep-scrub?who={0}'
                         .format(who), **kwargs)
 
@@ -592,14 +726,20 @@ class CephWrapper(client.CephClient):
         return self.post('request?wait=1', json = {'prefix': 'osd down', 'ids': ids}, **kwargs)
 
     def osd_in(self, ids, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/in?ids={0}'
                         .format(ids), **kwargs)
 
     def osd_lost(self, id, sure, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/lost?id={0}&sure={1}'
                         .format(id, sure), **kwargs)
 
     def osd_out(self, ids, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/out?ids={0}'
                         .format(ids), **kwargs)
 
@@ -631,18 +771,26 @@ class CephWrapper(client.CephClient):
         return self.post('request?wait=1', json = jsont, **kwargs)
 
     def osd_pool_param(self, pool, var, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/pool/get?pool={0}&var={1}'
                         .format(pool, var), **kwargs)
 
     def osd_pool_mksnap(self, pool, snap, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/pool/mksnap?pool={0}&snap={1}'
                         .format(pool, snap), **kwargs)
 
     def osd_pool_rename(self, srcpool, destpool, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/pool/rename?srcpool={0}&destpool={1}'
                         .format(srcpool, destpool), **kwargs)
 
     def osd_pool_rmsnap(self, pool, snap, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/pool/rmsnap?pool={0}&snap={1}'
                         .format(pool, snap), **kwargs)
 
@@ -662,22 +810,32 @@ class CephWrapper(client.CephClient):
         return self.post('request?wait=1', json = {'prefix': 'osd pool set-quota', 'pool': pool, 'field': field, 'val': val}, **kwargs)
 
     def osd_repair(self, pool, who, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/repair?who={0}'
                         .format(pool, who), **kwargs)
 
     def osd_reweight(self, id, weight, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/reweight?id={0}&weight={1}'
                         .format(id, weight), **kwargs)
 
     def osd_reweight_by_utilization(self, oload, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/reweight-by-utilization?oload={0}'
                         .format(oload), **kwargs)
 
     def osd_remove(self, ids, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/rm?ids={0}'
                         .format(ids), **kwargs)
 
     def osd_scrub(self, who, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/scrub?who={0}'
                         .format(who), **kwargs)
 
@@ -685,34 +843,50 @@ class CephWrapper(client.CephClient):
         return self.post('request?wait=1', json = {'prefix': 'osd set', 'key': key}, **kwargs)
 
     def osd_setmaxosd(self, newmax, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/setmaxosd?newmax={0}'
                         .format(newmax), **kwargs)
 
     def osd_thrash(self, num_epochs, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/thrash?num_epochs={0}'
                         .format(num_epochs), **kwargs)
 
     def osd_tier_add(self, pool, tierpool, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/tier/add?pool={0}&tierpool={1}'
                         .format(pool, tierpool), **kwargs)
 
     def osd_tier_cachemode(self, pool, mode, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/tier/cache-mode?pool={0}&mode={1}'
                         .format(pool, mode), **kwargs)
 
     def osd_tier_remove(self, pool, tierpool, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/tier/remove?pool={0}&tierpool={1}'
                         .format(pool, tierpool), **kwargs)
 
     def osd_tier_remove_overlay(self, pool, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/tier/remove-overlay?pool={0}'
                         .format(pool), **kwargs)
 
     def osd_tier_set_overlay(self, pool, overlaypool, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/tier/set-overlay?pool={0}&overlaypool={1}'
                         .format(pool, overlaypool), **kwargs)
 
     def osd_unset(self, key, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.put('osd/unset?key={0}'
                         .format(key), **kwargs)
 
@@ -720,12 +894,16 @@ class CephWrapper(client.CephClient):
     # pg GET calls
     ###
     def pg_debug(self, debugop, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         kwargs['supported_body_types'] = ['text', 'xml']
 
         return self.get('pg/debug?debugop={0}'
                         .format(debugop), **kwargs)
 
     def pg_dump(self, dumpcontents=None, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         if dumpcontents is not None:
             return self.get('pg/dump?dumpcontents={0}'
                             .format(dumpcontents), **kwargs)
@@ -733,6 +911,8 @@ class CephWrapper(client.CephClient):
             return self.get('pg/dump', **kwargs)
 
     def pg_dump_json(self, dumpcontents=None, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         if dumpcontents is not None:
             return self.get('pg/dump_json?dumpcontents={0}'
                             .format(dumpcontents), **kwargs)
@@ -740,6 +920,8 @@ class CephWrapper(client.CephClient):
             return self.get('pg/dump_json', **kwargs)
 
     def pg_dump_pools_json(self, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('pg/dump_pools_json', **kwargs)
 
     def pg_dump_stuck(self, stuckops=None, threshold=None, **kwargs):
@@ -752,36 +934,52 @@ class CephWrapper(client.CephClient):
 	return self.post('request?wait=1', json = jsont, **kwargs)
 
     def pg_getmap(self, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         kwargs['supported_body_types'] = ['binary']
 
         return self.get('pg/getmap', **kwargs)
 
     def pg_map(self, pgid, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('pg/map?pgid={0}'
                         .format(pgid), **kwargs)
 
     def pg_stat(self, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('pg/stat', **kwargs)
 
     ###
     # tell GET calls
     ###
     def tell_debug_dump_missing(self, id, filename, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('tell/{0}/debug_dump_missing?filename={1}'
                         .format(id, filename), **kwargs)
 
     def tell_dump_pg_recovery_stats(self, id, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('tell/{0}/dump_pg_recovery_stats'
                         .format(id), **kwargs)
 
     def tell_list_missing(self, id, offset, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('tell/{0}/list_missing?offset={1}'
                         .format(id, offset), **kwargs)
 
     def tell_query(self, id, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('tell/{0}/query'
                         .format(id), **kwargs)
 
     def tell_version(self, id, **kwargs):
+        #TODO: force raise exception
+        raise exceptions.FunctionNotImplemented()
         return self.get('tell/{0}/version'
                         .format(id), **kwargs)
-- 
2.17.1

