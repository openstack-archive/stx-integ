From 76096fbf09f43b4bc88bc1e4da38a5ddaee0fbc8 Mon Sep 17 00:00:00 2001
From: Jack Ding <jack.ding@windriver.com>
Date: Wed, 25 Oct 2017 13:30:01 -0400
Subject: [PATCH 1/4] Roll up TIS patches

---
 .../compute_reserved_config/ini_setting.rb         | 22 +++++
 lib/puppet/type/compute_reserved_config.rb         | 19 +++++
 manifests/api.pp                                   | 17 ++++
 manifests/compute.pp                               | 33 ++++++++
 manifests/compute/libvirt.pp                       |111 ++++++++++++++++++++++++++
 manifests/compute/neutron.pp                       | 15 ++++
 manifests/db.pp                                    |  3 +
 manifests/db/sync.pp                               |  3 +
 manifests/db/sync_api.pp                           |  3 +
 manifests/generic_service.pp                       |  2 +
 manifests/init.pp                                  |  6 ++
 manifests/migration/libvirt.pp                     |  8 +-
 manifests/network/neutron.pp                       |  5 +-
 manifests/params.pp                                |  2 +-
 manifests/vncproxy/common.pp                       | 68 +++++++++++-----
 spec/classes/nova_api_spec.rb                      |  7 ++
 16 files changed, 298 insertions(+), 26 deletions(-)
 create mode 100644 lib/puppet/provider/compute_reserved_config/ini_setting.rb
 create mode 100644 lib/puppet/type/compute_reserved_config.rb

diff --git a/lib/puppet/provider/compute_reserved_config/ini_setting.rb b/lib/puppet/provider/compute_reserved_config/ini_setting.rb
new file mode 100644
index 0000000..e7d142f
--- /dev/null
+++ b/lib/puppet/provider/compute_reserved_config/ini_setting.rb
@@ -0,0 +1,22 @@
+Puppet::Type.type(:compute_reserved_config).provide(
+  :ini_setting,
+  :parent => Puppet::Type.type(:ini_setting).provider(:ruby)
+) do
+
+  def section
+    resource[:name].split('/', 2).first
+  end
+
+  def setting
+    resource[:name].split('/', 2).last
+  end
+
+  def separator
+    '='
+  end
+
+  def file_path
+    '/etc/nova/compute_reserved.conf'
+  end
+
+end
diff --git a/lib/puppet/type/compute_reserved_config.rb b/lib/puppet/type/compute_reserved_config.rb
new file mode 100644
index 0000000..fa9d441
--- /dev/null
+++ b/lib/puppet/type/compute_reserved_config.rb
@@ -0,0 +1,19 @@
+Puppet::Type.newtype(:compute_reserved_config) do
+
+  ensurable
+
+  newparam(:name, :namevar => true) do
+    desc 'Section/setting name to manage from compute_reserved.conf'
+    newvalues(/\S*\/\S+/)
+  end
+
+  newproperty(:value) do
+    desc 'The value of the setting to be defined.'
+    munge do |value|
+      value = value.to_s.strip
+      value.capitalize! if value =~ /^(true|false)$/i
+      value
+    end
+  end
+
+end
diff --git a/manifests/api.pp b/manifests/api.pp
index 9d187ce..1d809c8 100644
--- a/manifests/api.pp
+++ b/manifests/api.pp
@@ -238,6 +238,13 @@
 #   (optional) User name for the vendordata dynamic plugin credentials.
 #   Defaults to $::os_service_default
 #
+# WRS PARAMETERS
+#  [*known_pci_devices*]
+#   (optional) Known PCI devices that may get special treatment:
+#   Defaults to undef
+#   Example
+#   "[ {'vendor_id':'8086', 'product_id':'0443', 'name':'Coleto Creek PCIe Co-processor'}, {...} ]"
+#
 # DEPRECATED
 #
 # [*conductor_workers*]
@@ -327,6 +334,9 @@ class nova::api(
   $vendordata_dynamic_auth_project_name        = $::os_service_default,
   $vendordata_dynamic_auth_user_domain_name    = $::os_service_default,
   $vendordata_dynamic_auth_username            = $::os_service_default,
+  # WRS PARAMETER
+  $known_pci_devices                           = undef,
+  $glance_host                                 = undef,
   # DEPRECATED PARAMETER
   $conductor_workers                           = undef,
   $osapi_max_limit                             = undef,
@@ -487,6 +497,7 @@ as a standalone service, or httpd for being run by a httpd server")
     'vendordata_dynamic_auth/project_name':        value => $vendordata_dynamic_auth_project_name;
     'vendordata_dynamic_auth/user_domain_name':    value => $vendordata_dynamic_auth_user_domain_name;
     'vendordata_dynamic_auth/username':            value => $vendordata_dynamic_auth_username;
+    'DEFAULT/glance_host':                         value => $glance_host;
   }
 
   oslo::middleware {'nova_config':
@@ -513,6 +524,12 @@ as a standalone service, or httpd for being run by a httpd server")
     }
   }
 
+  if $known_pci_devices {
+    nova_config {
+      'DEFAULT/known_pci_devices': value => check_array_of_hash($known_pci_devices);
+    }
+  }
+
   # Added arg and if statement prevents this from being run
   # where db is not active i.e. the compute
   if $sync_db {
diff --git a/manifests/compute.pp b/manifests/compute.pp
index 577cae7..e495f29 100644
--- a/manifests/compute.pp
+++ b/manifests/compute.pp
@@ -142,6 +142,15 @@
 #   will disable itself.
 #   Defaults to $::os_service_default
 #
+# WRS PARAMETERS
+# [*shared_pcpu_map*]
+#   (optional) A list or range of physical CPU cores to reserve
+#   for shared machine processes
+#   Defaults to undef
+#
+# [*compute_reserved_vm_memory_2M*]
+# [*compute_reserved_vm_memory_1G*]
+#
 # DEPRECATED
 #
 # [*pci_passthrough*]
@@ -183,6 +192,10 @@ class nova::compute (
   $barbican_api_version                        = $::os_service_default,
   $max_concurrent_live_migrations              = $::os_service_default,
   $consecutive_build_service_disable_threshold = $::os_service_default,
+  # WRS PARAMETERS
+  $shared_pcpu_map                    = undef,
+  $compute_reserved_vm_memory_2M      = '()',
+  $compute_reserved_vm_memory_1G      = '()',
   # DEPRECATED PARAMETERS
   $pci_passthrough                             = undef,
 ) {
@@ -222,6 +235,26 @@ class nova::compute (
     'DEFAULT/max_concurrent_live_migrations':    value => $max_concurrent_live_migrations;
     'compute/consecutive_build_service_disable_threshold':
       value => $consecutive_build_service_disable_threshold;
+    'DEFAULT/shared_pcpu_map':                   value => join(any2array($shared_pcpu_map), ',');
+  }
+
+  ## Only override build default if value is provided at runtime.
+  ## Setting to () has effect of calculating maximum 2M hugepages.
+  if ($compute_reserved_vm_memory_2M and ($compute_reserved_vm_memory_2M != '()')) {
+    compute_reserved_config {
+      '/COMPUTE_VM_MEMORY_2M' : value => $compute_reserved_vm_memory_2M;
+    }
+  }
+  if ($compute_reserved_vm_memory_1G and ($compute_reserved_vm_memory_1G != '()')) {
+    compute_reserved_config {
+      '/COMPUTE_VM_MEMORY_1G' : value => $compute_reserved_vm_memory_1G;
+    }
+  }
+
+  Compute_reserved_config<||> ~>
+  exec { 'compute-huge reload':
+    path    => [ '/usr/bin', '/usr/sbin', '/bin', '/sbin' ],
+    command => '/etc/init.d/compute-huge.sh reload',
   }
 
   ensure_resource('nova_config', 'DEFAULT/allow_resize_to_same_host', { value => $allow_resize_to_same_host })
diff --git a/manifests/compute/libvirt.pp b/manifests/compute/libvirt.pp
index 408a5f6..0d89c04 100644
--- a/manifests/compute/libvirt.pp
+++ b/manifests/compute/libvirt.pp
@@ -126,6 +126,36 @@
 #   you actually want to deploy.
 #   Defaults to true for backward compatibility.
 #
+#  === WRS PARAMETERS ===
+#
+# [*live_migration_downtime*]
+#   (optional) Maximum downtime in ms for live migration.
+#   Defaults to 500
+#
+# [*live_migration_downtime_steps*]
+#   (optional) Number of incremental steps to reach max
+#   downtime value.
+#   Defaults to 10
+#
+# [*live_migration_downtime_delay*]
+#   (optional) Time to wait in seconds per GB of RAM
+#   between each step increase of the migration downtime.
+#   Defaults to 75
+#
+# [*live_migration_completion_timeout*]
+#   (optional) Time to wait in seconds for migration to
+#   complete. Set to 0 to disable timeouts.
+#
+# [*live_migration_progress_timeout*]
+#   (optional) Time to wait in seconds for migration to make
+#   forward progress in transferring data before aborting.
+#   Defaults to 150
+#
+# [*mem_stats_period_seconds*]
+#   (optional) A number of seconds to memory usage statistics period.'
+#   Zero or negative value mean to disable memory usage statistics.
+#   Defaults to 10
+#
 class nova::compute::libvirt (
   $ensure_package                             = 'present',
   $libvirt_virt_type                          = 'kvm',
@@ -150,6 +180,14 @@ class nova::compute::libvirt (
   $compute_driver                             = 'libvirt.LibvirtDriver',
   $preallocate_images                         = $::os_service_default,
   $manage_libvirt_services                    = true,
+  # WRS PARAMETERS
+  $live_migration_flag                        = undef,
+  $live_migration_downtime                    = undef,
+  $live_migration_downtime_steps              = undef,
+  $live_migration_downtime_delay              = undef,
+  $live_migration_completion_timeout          = undef,
+  $live_migration_progress_timeout            = undef,
+  $mem_stats_period_seconds                   = undef,
 ) inherits nova::params {
 
   include ::nova::deps
@@ -272,4 +310,77 @@ class nova::compute::libvirt (
       'DEFAULT/remove_unused_original_minimum_age_seconds': ensure => absent;
     }
   }
+
+
+ # WRS
+ if $live_migration_flag != undef {
+    nova_config {
+      'libvirt/live_migration_flag': value => $live_migration_flag;
+    }
+  } else {
+    nova_config {
+      'libvirt/live_migration_flag': ensure => absent;
+    }
+  }
+
+  if $live_migration_downtime != undef {
+    nova_config {
+      'libvirt/live_migration_downtime': value => $live_migration_downtime;
+    }
+  } else {
+    nova_config {
+      'libvirt/live_migration_downtime': ensure => absent;
+    }
+  }
+
+  if $live_migration_downtime_steps != undef {
+    nova_config {
+      'libvirt/live_migration_downtime_steps': value => $live_migration_downtime_steps;
+    }
+  } else {
+    nova_config {
+      'libvirt/live_migration_downtime_steps': ensure => absent;
+    }
+  }
+
+  if $live_migration_downtime_delay != undef {
+    nova_config {
+      'libvirt/live_migration_downtime_delay': value => $live_migration_downtime_delay;
+    }
+  } else {
+    nova_config {
+      'libvirt/live_migration_downtime_delay': ensure => absent;
+    }
+  }
+
+  if $live_migration_completion_timeout != undef {
+    nova_config {
+      'libvirt/live_migration_completion_timeout': value => $live_migration_completion_timeout;
+    }
+  } else {
+    nova_config {
+      'libvirt/live_migration_completion_timeout': ensure => absent;
+    }
+  }
+
+  if $live_migration_progress_timeout != undef {
+    nova_config {
+      'libvirt/live_migration_progress_timeout': value => $live_migration_progress_timeout;
+    }
+  } else {
+    nova_config {
+      'libvirt/live_migration_progress_timeout': ensure => absent;
+    }
+  }
+
+  if $mem_stats_period_seconds != undef {
+    nova_config {
+      'libvirt/mem_stats_period_seconds': value => $live_migration_progress_timeout;
+    }
+  } else {
+    nova_config {
+      'libvirt/mem_stats_period_seconds': ensure => absent;
+    }
+  }
+
 }
diff --git a/manifests/compute/neutron.pp b/manifests/compute/neutron.pp
index 43d6eee..7932792 100644
--- a/manifests/compute/neutron.pp
+++ b/manifests/compute/neutron.pp
@@ -15,9 +15,14 @@
 #  Default to 0.0.0.0/0
 #  Due to architecture constraints in nova_config, it's not possible to setup
 #  more than one SNAT rule though initial parameter is MultiStrOpt
+#
+#  === WRS PARAMETERS ===
+#  [*libvirt_qemu_dpdk_options*]
+#
 class nova::compute::neutron (
   $libvirt_vif_driver = 'nova.virt.libvirt.vif.LibvirtGenericVIFDriver',
   $force_snat_range   = '0.0.0.0/0',
+  $libvirt_qemu_dpdk_options = undef,
 ) {
   include ::nova::deps
 
@@ -45,4 +50,14 @@ class nova::compute::neutron (
     }
   }
 
+  if $libvirt_qemu_dpdk_options != undef {
+    nova_config {
+      'libvirt/qemu_dpdk_options': value => $libvirt_qemu_dpdk_options;
+    }
+  } else {
+    nova_config {
+      'libvirt/qemu_dpdk_options': ensure => absent;
+    }
+  }
+
 }
diff --git a/manifests/db.pp b/manifests/db.pp
index 14d2555..109bd81 100644
--- a/manifests/db.pp
+++ b/manifests/db.pp
@@ -133,7 +133,10 @@ class nova::db (
       '^(sqlite|mysql(\+pymysql)?|postgresql):\/\/(\S+:\S+@\S+\/\S+)?')
 
     nova_config {
+      'api_database/max_overflow':     value => $database_max_overflow_real;
       'api_database/connection':       value => $api_database_connection_real, secret => true;
+      'api_database/idle_timeout':     value => $database_idle_timeout_real;
+      'api_database/max_pool_size':    value => $database_max_pool_size_real;
       'api_database/slave_connection': value => $api_slave_connection_real, secret => true;
     }
 
diff --git a/manifests/db/sync.pp b/manifests/db/sync.pp
index 668520f..9116370 100644
--- a/manifests/db/sync.pp
+++ b/manifests/db/sync.pp
@@ -35,5 +35,8 @@ class nova::db::sync(
       Anchor['nova::dbsync::begin']
     ],
     notify      => Anchor['nova::dbsync::end'],
+    # Only do the db sync if both controllers are running the same software
+    # version. Avoids impacting mate controller during an upgrade.
+    onlyif      => "/usr/bin/test $::controller_sw_versions_match = true",
   }
 }
diff --git a/manifests/db/sync_api.pp b/manifests/db/sync_api.pp
index 5f09582..aed359b 100644
--- a/manifests/db/sync_api.pp
+++ b/manifests/db/sync_api.pp
@@ -44,6 +44,9 @@ class nova::db::sync_api(
       Anchor['nova::dbsync_api::begin']
     ],
     notify      => Anchor['nova::dbsync_api::end'],
+    # Only do the db sync if both controllers are running the same software
+    # version. Avoids impacting mate controller during an upgrade.
+    onlyif      => "/usr/bin/test $::controller_sw_versions_match = true",
   }
 
   if $cellv2_setup {
diff --git a/manifests/generic_service.pp b/manifests/generic_service.pp
index 0f3e37d..0fa7ee0 100644
--- a/manifests/generic_service.pp
+++ b/manifests/generic_service.pp
@@ -62,6 +62,8 @@ define nova::generic_service(
       } else {
         $service_ensure = 'stopped'
       }
+    } else {
+      $service_ensure = 'stopped'
     }
 
     service { $nova_title:
diff --git a/manifests/init.pp b/manifests/init.pp
index ca6a217..66e16a8 100644
--- a/manifests/init.pp
+++ b/manifests/init.pp
@@ -775,4 +775,10 @@ but should be one of: ssh-rsa, ssh-dsa, ssh-ecdsa.")
     'upgrade_levels/scheduler':   value => $upgrade_level_scheduler;
   }
 
+  # WRS:extension:
+  nova_config {
+    # WRS extension: default flavor extra-spec hw:mem_page_size
+    'DEFAULT/default_mempages_size':   value => '2048';
+  }
+
 }
diff --git a/manifests/migration/libvirt.pp b/manifests/migration/libvirt.pp
index 2a1d6e0..6ad3390 100644
--- a/manifests/migration/libvirt.pp
+++ b/manifests/migration/libvirt.pp
@@ -166,10 +166,12 @@ class nova::migration::libvirt(
     }
 
     nova_config {
-      'libvirt/live_migration_uri':                value => $live_migration_uri;
       'libvirt/live_migration_tunnelled':          value => $live_migration_tunnelled;
-      'libvirt/live_migration_completion_timeout': value => $live_migration_completion_timeout;
-      'libvirt/live_migration_inbound_addr':       value => $live_migration_inbound_addr;
+      # WRS: Currently setting these in nova::compute::libvirt
+      # 'libvirt/live_migration_completion_timeout': value => $live_migration_completion_timeout;
+      # WRS: setting these in WRS puppet modules
+      # 'libvirt/live_migration_uri':                value => $live_migration_uri;
+      # 'libvirt/live_migration_inbound_addr':       value => $live_migration_inbound_addr;
       'libvirt/live_migration_scheme':             value => $live_migration_scheme;
     }
   }
diff --git a/manifests/network/neutron.pp b/manifests/network/neutron.pp
index e5a310a..8a2c28b 100644
--- a/manifests/network/neutron.pp
+++ b/manifests/network/neutron.pp
@@ -124,7 +124,7 @@
 #
 class nova::network::neutron (
   $neutron_password                = false,
-  $neutron_auth_type               = 'v3password',
+  $neutron_auth_type               = 'password',
   $neutron_project_name            = 'services',
   $neutron_project_domain_name     = 'Default',
   $neutron_username                = 'neutron',
@@ -148,7 +148,8 @@ class nova::network::neutron (
   include ::nova::deps
 
 
-  $default_floating_pool_real = pick($::nova::api::default_floating_pool, $default_floating_pool)
+  # WRS: remove dependency on nova::api
+  $default_floating_pool_real = $default_floating_pool
 
   nova_config {
     'DEFAULT/dhcp_domain':             value => $dhcp_domain;
diff --git a/manifests/params.pp b/manifests/params.pp
index 4afa1dd..75ae241 100644
--- a/manifests/params.pp
+++ b/manifests/params.pp
@@ -32,7 +32,7 @@ class nova::params {
       $api_service_name              = 'openstack-nova-api'
       $cells_service_name            = 'openstack-nova-cells'
       $cert_service_name             = 'openstack-nova-cert'
-      $compute_service_name          = 'openstack-nova-compute'
+      $compute_service_name          = 'nova-compute'
       $conductor_service_name        = 'openstack-nova-conductor'
       $consoleauth_service_name      = 'openstack-nova-consoleauth'
       $libvirt_service_name          = 'libvirtd'
diff --git a/manifests/vncproxy/common.pp b/manifests/vncproxy/common.pp
index 72c12c2..7a6a2ff 100644
--- a/manifests/vncproxy/common.pp
+++ b/manifests/vncproxy/common.pp
@@ -25,26 +25,54 @@ class nova::vncproxy::common (
 
   include ::nova::deps
 
-  $vncproxy_host_real     = normalize_ip_for_uri(pick(
-    $vncproxy_host,
-    $::nova::compute::vncproxy_host,
-    $::nova::vncproxy::host,
-    false))
-  $vncproxy_protocol_real = pick(
-    $vncproxy_protocol,
-    $::nova::compute::vncproxy_protocol,
-    $::nova::vncproxy::vncproxy_protocol,
-    'http')
-  $vncproxy_port_real     = pick(
-    $vncproxy_port,
-    $::nova::compute::vncproxy_port,
-    $::nova::vncproxy::port,
-    6080)
-  $vncproxy_path_real     = pick(
-    $vncproxy_path,
-    $::nova::compute::vncproxy_path,
-    $::nova::vncproxy::vncproxy_path,
-    '/vnc_auto.html')
+ if defined(Class['nova::compute']) {
+   $vncproxy_host_real     = normalize_ip_for_uri(pick(
+     $vncproxy_host,
+     $::nova::compute::vncproxy_host,
+     false))
+   $vncproxy_protocol_real = pick(
+     $vncproxy_protocol,
+     $::nova::compute::vncproxy_protocol,
+     'http')
+   $vncproxy_port_real     = pick(
+     $vncproxy_port,
+     $::nova::compute::vncproxy_port,
+     6080)
+   $vncproxy_path_real     = pick(
+     $vncproxy_path,
+     $::nova::compute::vncproxy_path,
+     '/vnc_auto.html')
+ } elsif defined(Class['nova::vncproxy']) {
+   $vncproxy_host_real     = normalize_ip_for_uri(pick(
+     $vncproxy_host,
+     $::nova::vncproxy::host,
+     false))
+   $vncproxy_protocol_real = pick(
+     $vncproxy_protocol,
+     $::nova::vncproxy::vncproxy_protocol,
+     'http')
+   $vncproxy_port_real     = pick(
+     $vncproxy_port,
+     $::nova::vncproxy::port,
+     6080)
+   $vncproxy_path_real     = pick(
+     $vncproxy_path,
+     $::nova::vncproxy::vncproxy_path,
+     '/vnc_auto.html')
+ } else {
+   $vncproxy_host_real     = normalize_ip_for_uri(pick(
+     $vncproxy_host,
+     false))
+   $vncproxy_protocol_real = pick(
+     $vncproxy_protocol,
+     'http')
+   $vncproxy_port_real     = pick(
+     $vncproxy_port,
+     6080)
+   $vncproxy_path_real     = pick(
+     $vncproxy_path,
+     '/vnc_auto.html')
+ }
 
   if ($vncproxy_host_real) {
     $vncproxy_base_url = "${vncproxy_protocol_real}://${vncproxy_host_real}:${vncproxy_port_real}${vncproxy_path_real}"
diff --git a/spec/classes/nova_api_spec.rb b/spec/classes/nova_api_spec.rb
index 55ae065..fb7e782 100644
--- a/spec/classes/nova_api_spec.rb
+++ b/spec/classes/nova_api_spec.rb
@@ -131,6 +131,7 @@ describe 'nova::api' do
           :vendordata_dynamic_auth_project_name        => 'project',
           :vendordata_dynamic_auth_user_domain_name    => 'Default',
           :vendordata_dynamic_auth_username            => 'user',
+          :known_pci_devices                           => "[{\"vendor_id\":\"8086\",\"product_id\":\"0443\",\"name\":\"Coleto Creek PCIe Co-processor\"}]",
         })
       end
 
@@ -224,6 +225,12 @@ describe 'nova::api' do
           'value' => ['{"vendor_id":"8086","product_id":"0126","name":"graphic_card"}','{"vendor_id":"9096","product_id":"1520","name":"network_card"}']
         )
       end
+
+       it 'configures nova known_pci_devices entries' do
+        is_expected.to contain_nova_config('DEFAULT/known_pci_devices').with(
+          'value' => "[{\"vendor_id\":\"8086\",\"product_id\":\"0443\",\"name\":\"Coleto Creek PCIe Co-processor\"}]"
+        )
+      end
     end
 
     context 'when pci_alias is empty' do
-- 
1.8.3.1

