From 208ddc606676df7daf540b9d9f7e8a5a19e13b50 Mon Sep 17 00:00:00 2001
From: martin <martin@starlingx.com>
Date: Fri, 28 Dec 2018 21:18:13 +0000
Subject: [PATCH] fix CentOS 7.6 uprade compile error

1, fix improper call of part_round_stats and part_inc_in_flight
in drbd_req.c, as CONFIG_BLK_DEV_DRBD=m defined in
kernel-3.10.0-x86_64.config.tis_extra

2, add explicit declaration for trace_bpf_int_jit_compile,
trace_bpf_jit_compile, trace_bpf_jit_free, if pmd_read_atomic not
defined
---
 drivers/block/drbd/drbd_req.c | 14 ++++++++++----
 include/linux/filter.h        |  4 ++++
 2 files changed, 14 insertions(+), 4 deletions(-)

diff --git a/drivers/block/drbd/drbd_req.c b/drivers/block/drbd/drbd_req.c
index a6f13f7..65406eb 100644
--- a/drivers/block/drbd/drbd_req.c
+++ b/drivers/block/drbd/drbd_req.c
@@ -37,14 +37,17 @@ static bool drbd_may_do_local_read(struct drbd_conf *mdev, sector_t sector, int
 static void _drbd_start_io_acct(struct drbd_conf *mdev, struct drbd_request *req)
 {
 	const int rw = bio_data_dir(req->master_bio);
+	struct request_queue *q
+		= container_of((void*)mdev, struct request_queue, queuedata);
 	int cpu;
+
 	cpu = part_stat_lock();
-	part_round_stats(cpu, &mdev->vdisk->part0);
+	part_round_stats(q, cpu, &mdev->vdisk->part0);
 	part_stat_inc(cpu, &mdev->vdisk->part0, ios[rw]);
 	part_stat_add(cpu, &mdev->vdisk->part0, sectors[rw], req->i.size >> 9);
 	(void) cpu; /* The macro invocations above want the cpu argument, I do not like
 		       the compiler warning about cpu only assigned but never used... */
-	part_inc_in_flight(&mdev->vdisk->part0, rw);
+	part_inc_in_flight(q, &mdev->vdisk->part0, rw);
 	part_stat_unlock();
 }
 
@@ -53,11 +56,14 @@ static void _drbd_end_io_acct(struct drbd_conf *mdev, struct drbd_request *req)
 {
 	int rw = bio_data_dir(req->master_bio);
 	unsigned long duration = jiffies - req->start_time;
+	struct request_queue *q
+		= container_of((void*)mdev, struct request_queue, queuedata);
 	int cpu;
+
 	cpu = part_stat_lock();
 	part_stat_add(cpu, &mdev->vdisk->part0, ticks[rw], duration);
-	part_round_stats(cpu, &mdev->vdisk->part0);
-	part_dec_in_flight(&mdev->vdisk->part0, rw);
+	part_round_stats(q, cpu, &mdev->vdisk->part0);
+	part_dec_in_flight(q, &mdev->vdisk->part0, rw);
 	part_stat_unlock();
 }
 
diff --git a/include/linux/filter.h b/include/linux/filter.h
index cddbb31..15ce55f 100644
--- a/include/linux/filter.h
+++ b/include/linux/filter.h
@@ -665,6 +665,10 @@ static inline bool bpf_jit_blinding_enabled(struct bpf_prog *prog)
 	return true;
 }
 #else
+struct bpf_prog * __weak trace_bpf_int_jit_compile(struct bpf_prog *prog);
+void __weak trace_bpf_jit_compile(struct bpf_prog *prog);
+void __weak trace_bpf_jit_free(struct bpf_prog *fp);
+
 static inline bool ebpf_jit_enabled(void)
 {
 	return false;
-- 
1.8.3.1

